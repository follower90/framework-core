#!/usr/bin/php

<?php

require_once __DIR__ . '/../../../../vendor/autoload.php';
require_once __DIR__ . '/../../../../config.php';

class ProjectBuilder
{
	private $args = [];
	private $result = [];

	public function __construct($args)
	{
		$this->args = $args;
	}

	public function applyToAllRepo($cmd, $params = '')
	{
		$projects = [];
		$path = 'vendor/follower/';
		exec('cd ' . $path . ' && ls', $projects);

		array_unshift($projects, '');

		foreach ($projects as $project) {
			if ($cmd === 'add') {
				$this->runCmd($cmd, $path . $project, $params);
			} else {
				echo $this->formatString() . PHP_EOL;
				echo $this->formatString('+------------------------------') . PHP_EOL;
				echo $this->formatString('| ' . ($project ? 'follower/' . $project : 'main')) . PHP_EOL;
				echo $this->formatString('+------------------------------') . PHP_EOL;
				echo $this->formatString($this->runCmd($cmd, $path . $project, $params)) . PHP_EOL;
			}
		}
	}

	public function execute()
	{
		switch ($this->args[1]) {
			case 'status' :
				$this->applyToAllRepo($this->args[1]);
				break;

			case 'reset' :
				$this->applyToAllRepo($this->args[1], $this->args[2]);
				break;

			case 'push' :
			case 'pull' :
				if (empty($this->args[2])) {
					$this->args[2] = 'origin';
				}
				if (empty($this->args[3])) {
					$this->args[3] = 'master';
				}
				$this->applyToAllRepo($this->args[1], $this->args[2] . ' ' . $this->args[3]);
				break;

			case 'check' :
				$this->checkSyntaxErrors();
				break;

			case 'commit' :
				if (array_key_exists(2, $this->args)) {
					$this->applyToAllRepo('add', '.');
					$this->applyToAllRepo('commit -am \'' . $this->args[2] . '\'');
				} else {
					$this->result[] = 'Enter commit reason';
				}
				break;

			case 'schema:update':
				$paths = ['vendor/follower/core/backend'];
				if (array_key_exists(2, $this->args)) {
					$paths[] = $this->args[2];
				}
				\Core\Database\Schema::createObjects($paths);
				break;

			case 'schema:create':
				if (!array_key_exists(2, $this->args)) {
					return false;
				}
				\Core\Database\Schema::createObject($this->args[2], ['clearDb' => true]);
				break;

			case 'schema:migrate':
				$path = null;
				if (array_key_exists(2, $this->args)) {
					$path = $this->args[2];
				}
				if ($path) {
					\Core\Database\Schema::migrate($path);
				}
				break;
			case 'test':
				exec('cd vendor/follower/core/unitTest && phpunit .', $result);
				echo implode("\n", $result) . PHP_EOL;
				break;
			case 'help':
			default:
				$this->result = [
					$this->formatString('Project Builder v 1.2', 'red'),
					'Git aggregator commands:',
					$this->formatString('commit \'commit reason\'', 'green') . '      commits changes to current branch',
					$this->formatString('status', 'green') . '                      \'git status\' output',
					$this->formatString('push', 'green') . '                        \'git push\' to all repositories',
					$this->formatString('pull', 'green') . '                        \'git pull\' from all repositories',
					$this->formatString('check', 'green') . '                       syntax checker for *.php files',
					'',
					'Schema commands:',
					$this->formatString('schema:update \'project\'', 'green') . '     clears db and recreate schema',
					$this->formatString('schema:migrate \'project\'', 'green') . '    does migrations for project',
					$this->formatString('schema:create \'object\'', 'green') . '      creates table for specified object',
					'',
					'Other commands:',
					$this->formatString('test', 'green') . '                        run follower/core unit tests',
				];
				break;
		}

		$this->resultOutput();
	}

	private function checkSyntaxErrors()
	{
		$root = getcwd();
		$dir = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($root));

		foreach ($dir as $path => $fileInfo) {
			$results = [];
			if ($fileInfo->isFile() && $fileInfo->getExtension() === 'php') {
				exec('php -l ' . $fileInfo->getPathname(), $results);
			}

			foreach ($results as $result) {
				if (preg_match("/^No syntax errors detected.*$/", $result)) {
					echo $this->formatString($result, 'green') . PHP_EOL;
				} else {
					echo $this->formatString($result, 'red') . PHP_EOL;
				}
			}
		}
	}

	private function formatString($text = '', $color = false)
	{
		switch ($color) {
			case 'green':
				return "\033[32m$text \033[0m";
				break;
			case 'red':
				return "\033[31m$text \033[0m";
				break;
			default:
				return $text;
		}
	}

	private function runCmd($command, $path = false, $params = '')
	{
		$cd = $path ? 'cd ' . $path . ' && ' : '';
		exec($cd . 'git ' . $command . ' ' . $params, $result);
		return implode("\n", $result);
	}

	private function resultOutput()
	{
		array_walk($this->result, function ($line) {
			echo $this->formatString($line) . PHP_EOL;
		});
	}
}

$builder = new ProjectBuilder($argv);
$builder->execute();
